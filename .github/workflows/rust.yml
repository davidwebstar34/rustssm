name: Rust CI/CD

on:
  push:
    branches: ["main"]
    tags:
      - "v*.*.*"

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  REPO_NAME: ${{ github.event.repository.name }}

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust dependencies
        run: rustup component add rustfmt clippy

      - name: Build
        run: cargo build --verbose

      - name: Test
        run: cargo test

      - name: Format Check
        run: cargo fmt --all -- --check

      - name: Clippy Linter
        run: cargo clippy -- -D warnings

      - name: Check for Compilation Issues
        run: cargo check

      - name: Install and Run Security Audit
        run: |
          cargo install cargo-audit
          cargo audit

  build_release:
    needs: build_and_test
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Build Release Binary
        run: cargo build --release --target=${{ matrix.target }}

      - name: Rename Binary with Version
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          BINARY_NAME=${{ env.REPO_NAME }}
          EXT=""
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            EXT=".exe"
          fi
          mv target/${{ matrix.target }}/release/${BINARY_NAME}${EXT} ${BINARY_NAME}-${VERSION}-${{ matrix.target }}${EXT}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO_NAME }}-${{ github.ref_name }}-${{ matrix.target }}
          path: ./${{ env.REPO_NAME }}-${{ github.ref_name }}-${{ matrix.target }}*
          retention-days: 5

  release:
    needs: build_release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download All Binaries
        uses: actions/download-artifact@v4
        with:
          path: ./release-assets

      - name: Set Executable Permissions
        run: chmod +x ./release-assets/*/* || true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-assets/**/*.exe
            release-assets/**/${{ env.REPO_NAME }}-*
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
