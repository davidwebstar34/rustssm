name: Rust CI/CD
on:
  push:
    branches: ["main"]
    tags:
      - "v*.*.*"
permissions:
  contents: write
env:
  CARGO_TERM_COLOR: always
  REPO_NAME: ${{ github.event.repository.name }}
jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Install Rust dependencies
        run: rustup component add rustfmt clippy
      - name: Build
        run: cargo build --verbose
      - name: Test
        run: cargo test
      - name: Format Check
        run: cargo fmt --all -- --check
      - name: Clippy Linter
        run: cargo clippy -- -D warnings
      - name: Check for Compilation Issues
        run: cargo check
      - name: Install and Run Security Audit
        run: |
          cargo install cargo-audit
          cargo audit
  build_release:
    needs: build_and_test
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set Up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
          components: rustfmt, clippy
      # For macOS ARM specifically
      - name: Install aarch64 dependencies (macOS)
        if: matrix.target == 'aarch64-apple-darwin'
        run: rustup target add aarch64-apple-darwin
      - name: Build Release Binary
        run: cargo build --release --target=${{ matrix.target }}
      - name: Debug - Check Binary Path
        shell: bash
        run: |
          echo "Checking binary path:"
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            ls -la target/${{ matrix.target }}/release/
          else
            ls -la target/${{ matrix.target }}/release/
          fi
      - name: Create Artifact Directory
        run: mkdir -p artifacts
      - name: Copy Binary (Unix)
        if: runner.os != 'Windows'
        run: |
          cp target/${{ matrix.target }}/release/${{ env.REPO_NAME }} artifacts/${{ env.REPO_NAME }}-${{ github.ref_name }}-${{ matrix.target }}
      - name: Copy Binary (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          cp target/${{ matrix.target }}/release/${{ env.REPO_NAME }}.exe artifacts/${{ env.REPO_NAME }}-${{ github.ref_name }}-${{ matrix.target }}.exe
      - name: Check Artifacts Directory
        shell: bash
        run: |
          echo "Files in artifacts directory:"
          ls -la artifacts/
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.target }}
          path: artifacts/
          retention-days: 5
  release:
    needs: build_release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release-assets
      - name: Debug - List All Files
        run: |
          echo "Files in release-assets directory:"
          find ./release-assets -type f | sort
      - name: Prepare Release Files
        run: |
          mkdir -p release-files
          cp release-assets/binary-x86_64-unknown-linux-gnu/* release-files/ || echo "Missing Linux binary"
          cp release-assets/binary-x86_64-apple-darwin/* release-files/ || echo "Missing macOS Intel binary"
          cp release-assets/binary-aarch64-apple-darwin/* release-files/ || echo "Missing macOS ARM binary"
          cp release-assets/binary-x86_64-pc-windows-msvc/* release-files/ || echo "Missing Windows binary"
          chmod +x release-files/* || true
          echo "Files in release-files directory:"
          ls -la release-files/
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./release-files/*
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
